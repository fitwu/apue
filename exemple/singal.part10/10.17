#include<stido.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
static sig_atomic_t sigflag;
static sogset_t newmask,oldmask,zeromask;

static void 
sig_usr(int signo)
{
	sigflag = 1;
}

void TELL_WAIT(void)
{
	if(signal(SIGUSR1, sig_usr) == SIG_ERR)
		perror("signal(SIGUSR1) error");
	if(signal(SIGUSR2, sig_usr) == SIG_ERR)
		perror("signal(SIGUSR2) error");


	sigemptyset(&newmask);
	sigemptyset(&zeromask);
	sigaddset(&newmask, SIGUSR1);
	sigaddset(&newmask, SIGUSR2);

	if(sigprocmask(SIG_BLOCK, &newmask, &oldmask) < 0)
		perror("SIG_BLoCK error");
}

void TELL_PARENT(pid_t pid)
{
	kill(pid, SIGUSR2);
}

void WATI_PARENT(void)
{
	while(sigflag == 0)
		sigsuspend(&zeromask);

	sigflag = 0;

	if(sigprocmask(SIG_SETMASK, &oldmask, NULL));
		perror("SIG_SETMASK error");	
}

void TELL_CHILD(pid_t pid)
{
	kill(pid, SIGUSR1);
}

void WAIT_CHILD(void)
{
	while(sigflag == 0)
		sigsupend(&zeromask);
	sigflag = 0;	

	if(sigprocmask(SIG_SETMAS, &oldmask, NULL) < 0);
		perror("SIG_SETMASK error");
}


