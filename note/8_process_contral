1. 进程标示符

	#include <unistd.h>
	pid_t getpid(void);
	pid_t getppid(void);
	
	uid_t getuid(void);
	uid_t geteuid(void);
	
	gid_t getgid(void);
	gid_t getegid(void);

2. fork vfork

	pid_t fork(void);

		fork()	子进程复制数据空间,堆和栈的副本
		vfork()	子进程共享副进程,且子进程先进行至exec

	父子进程之间的区别:
		fork的返回值
		两个进程具有不同的父进程ID
		子进程的tms_utime tms_stime tms_cutime以及tms_ustime均设置为0
		父进程设置的文件锁不会被继承
		子进程的为处理的闹钟被清除
		子进程的为处理信号集设置为空集


3. exit _exit _Exit
	
	在vfork()中, 子进程注意如果使用了父进程中的变量,子进程可以使用 _exit(),如果使用exit,则会弹栈()

	exit会冲洗所有缓冲区,并且关闭流


	僵死进程 父进程没有接受子进程返回信息


4. wait waitpid

	子进程异常终止或者正常终止,内核就向其父进程发送 SIGCHLD 信号,异步事件,可以忽略也可以调用函数

	#include<sys/wait.h>	
	pid_t wait(int *statloc);
	pid_t waitpid(pid_t pid, int *statloc, int options);

	如果没有子进程,则立即返回出错
	如何子进程都在运行,则阻塞

	wait waitpid区别
		wait使调用者阻塞,waitpid有选项可以不阻塞
		wait只要有子进程终止,就返回,waitpid可以选择子进程

	
	waitpid
		pid:
			-1: 等待任意一个进程
			>0
			==0: 等待其组ID与调用进程组ID的任一子进程	
			<-1: 等待其组ID等于pid绝对值的任一子进程
	
		options:
			WNOHANG: 如果不可用,则不阻塞,返回0
			WCONTINUED: 若支持作业控制,那么由pid指定的人一子进程在暂停后已继续,但其状态尚未报告,则返回其状态
			WUNTRACED: 若支持作业控制,而由pid指定的任一子进程已处于暂停状态,且其状态自暂停之后还未报告,则返回状态


5. 竞争状态
	race condition

	TELL_WAIT()
	
	TELL_PARENT()
	WAIT_CHILD()
	WAIT_CHILD()
	TELL_PARENT()

6. exec函数

	#include<unistd.h>
	int execl(const char *pathname, const char *argv0,.../* (char *)0 */);
	int execv(const char *pathname, char * const argv[]);
	int execle(const char *pathname, const char *argv0,... /* (char *)0, char *const envp[] */);
	int execve(const char *pathname, char* const argv[], char *const envp[]);

	int execlp(const char *filename, const char *argv0,.../*(char *)0 */);
	int execvp(const char *filename, char *const argv[]);

	只有execve是系统调用 其他函数都要转化成execve

7. 更改用户ID和组ID

	#include<unistd.h>
	int setuid(uid_t uid);
	int setgid(gid_t gid);

		若进程有超级用户特权,则setuid将改变实际用户,有效用户和保存的设置用户ID为uid
		若没有超级用户特权,但是uid=实际用户ID或者保存的设置用户ID,则将有效用户改变为uid

	关于三个用户UD
		1) 只有root才可以改变实际用户ID,root调用setuid()
		2) 仅当对程序文件设置了设置用户ID,exec才会设置有效用户ID
		3) 保存的设置用户ID是由exec复制有效用户ID而得来的.
	
	int seteuid(uid_t uid);
	int setegid(gid_t gid);

		setuid与seteuid区别   后者在root下之改变euid 而前者三个ID都改变

8.	解释器文件

	解释器的pathname是第一个参数 argv[0]
	接着是上面的可选参数 
	下来才是 文件的pathname
	然后是参数


	

	./wu -s			#!/bin/bash -f	 
	 2		3			0		1	 
	
9. system函数

	设置用户ID或设置组ID程序绝不应调用system函数
	system会以设置ID的身份运行

10. 进程时间
	
	#include<sys/times.h>
	clock_t times(struct tms *buf);

	struct tms{
		clock_t tms_utime;
		clock_t tms_stime;
		clock_t tms_cutime;
		clock_t tms_cstime;
	};
	两个时间需要做差值

	返回的clock值用_SC_CLK_TCK(由syscong函数返回的每秒时钟滴答数)变换成秒数

11. ps命令进程的各种状态

	ps aux   :
		a:	所有tty
		u:	格式
		x:	一个终端下的all process

	S	处于休眠
	D 	不可中断(通常是IO)
	R 	正在运行或者在队列中的进程
	Z  	僵死进程
	X 	死掉的进程
	T	停止或被追踪
	s	包含子进程
	+ 	位于后台进程组
	|	多线程
	N	底优先级
	< 	高优先级



		
	
	
	
